apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: helmreleases.helm.toolkit.fluxcd.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
spec:
  group: helm.toolkit.fluxcd.io
  names:
    kind: HelmRelease
    listKind: HelmReleaseList
    plural: helmreleases
    shortNames:
    - hr
    singular: helmrelease
  scope: Namespaced
  versions:
  - name: v2beta1
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].status
    - name: Status
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].message
    - name: Age
      type: date
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: HelmRelease is the Schema for the helmreleases API
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: HelmReleaseSpec defines the desired state of a Helm release.
            properties:
              serviceAccountName:
                type: string
                description: The name of the Kubernetes service account to impersonate
                  when reconciling this HelmRelease.
              chart:
                type: object
                description: Chart defines the template of the v1beta1.HelmChart that
                  should be created for this HelmRelease.
                properties:
                  spec:
                    type: object
                    description: Spec holds the template for the v1beta1.HelmChartSpec
                      for this HelmRelease.
                    properties:
                      chart:
                        type: string
                        description: The name or path the Helm chart is available
                          at in the SourceRef.
                      interval:
                        type: string
                        description: Interval at which to check the v1beta1.Source
                          for updates. Defaults to 'HelmReleaseSpec.Interval'.
                      sourceRef:
                        type: object
                        description: The name and namespace of the v1beta1.Source
                          the chart is available at.
                        properties:
                          name:
                            type: string
                            description: Name of the referent.
                            maxLength: 253
                            minLength: 1
                          namespace:
                            type: string
                            description: Namespace of the referent.
                            maxLength: 63
                            minLength: 1
                          apiVersion:
                            type: string
                            description: APIVersion of the referent.
                          kind:
                            type: string
                            description: Kind of the referent.
                            enum:
                            - HelmRepository
                            - GitRepository
                            - Bucket
                        required:
                        - name
                      valuesFile:
                        type: string
                        description: Alternative values file to use as the default
                          chart values, expected to be a relative path in the SourceRef.
                          Ignored when omitted.
                      version:
                        type: string
                        default: '*'
                        description: Version semver expression, ignored for charts
                          from v1beta1.GitRepository and v1beta1.Bucket sources. Defaults
                          to latest when omitted.
                    required:
                    - chart
                    - sourceRef
                required:
                - spec
              dependsOn:
                type: array
                description: DependsOn may contain a dependency.CrossNamespaceDependencyReference
                  slice with references to HelmRelease resources that must be ready
                  before this HelmRelease can be reconciled.
                items:
                  type: object
                  description: CrossNamespaceDependencyReference holds the reference
                    to a dependency.
                  properties:
                    name:
                      type: string
                      description: Name holds the name reference of a dependency.
                    namespace:
                      type: string
                      description: Namespace holds the namespace reference of a dependency.
                  required:
                  - name
              install:
                type: object
                description: Install holds the configuration for Helm install actions
                  for this HelmRelease.
                properties:
                  createNamespace:
                    type: boolean
                    description: CreateNamespace tells the Helm install action to
                      create the HelmReleaseSpec.TargetNamespace if it does not exist
                      yet. On uninstall, the namespace will not be garbage collected.
                  disableHooks:
                    type: boolean
                    description: DisableHooks prevents hooks from running during the
                      Helm install action.
                  disableOpenAPIValidation:
                    type: boolean
                    description: DisableOpenAPIValidation prevents the Helm install
                      action from validating rendered templates against the Kubernetes
                      OpenAPI Schema.
                  disableWait:
                    type: boolean
                    description: DisableWait disables the waiting for resources to
                      be ready after a Helm install has been performed.
                  remediation:
                    type: object
                    description: Remediation holds the remediation configuration for
                      when the Helm install action for the HelmRelease fails. The
                      default is to not perform any action.
                    properties:
                      ignoreTestFailures:
                        type: boolean
                        description: IgnoreTestFailures tells the controller to skip
                          remediation when the Helm tests are run after an install
                          action but fail. Defaults to 'Test.IgnoreFailures'.
                      remediateLastFailure:
                        type: boolean
                        description: RemediateLastFailure tells the controller to
                          remediate the last failure, when no retries remain. Defaults
                          to 'false'.
                      retries:
                        type: integer
                        description: Retries is the number of retries that should
                          be attempted on failures before bailing. Remediation, using
                          an uninstall, is performed between each attempt. Defaults
                          to '0', a negative integer equals to unlimited retries.
                  replace:
                    type: boolean
                    description: Replace tells the Helm install action to re-use the
                      'ReleaseName', but only if that name is a deleted release which
                      remains in the history.
                  skipCRDs:
                    type: boolean
                    description: SkipCRDs tells the Helm install action to not install
                      any CRDs. By default, CRDs are installed if not already present.
                  timeout:
                    type: string
                    description: Timeout is the time to wait for any individual Kubernetes
                      operation (like Jobs for hooks) during the performance of a
                      Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
              interval:
                type: string
                description: Interval at which to reconcile the Helm release.
              kubeConfig:
                type: object
                description: KubeConfig for reconciling the HelmRelease on a remote
                  cluster. When specified, KubeConfig takes precedence over ServiceAccountName.
                properties:
                  secretRef:
                    type: object
                    description: SecretRef holds the name to a secret that contains
                      a 'value' key with the kubeconfig file as the value. It must
                      be in the same namespace as the HelmRelease. It is recommended
                      that the kubeconfig is self-contained, and the secret is regularly
                      updated if credentials such as a cloud-access-token expire.
                      Cloud specific `cmd-path` auth helpers will not function without
                      adding binaries and credentials to the Pod that is responsible
                      for reconciling the HelmRelease.
                    properties:
                      name:
                        type: string
                        description: Name of the referent
                    required:
                    - name
              maxHistory:
                type: integer
                description: MaxHistory is the number of revisions saved by Helm for
                  this HelmRelease. Use '0' for an unlimited number of revisions;
                  defaults to '10'.
              postRenderers:
                type: array
                description: PostRenderers holds an array of Helm PostRenderers, which
                  will be applied in order of their definition.
                items:
                  type: object
                  description: PostRenderer contains a Helm PostRenderer specification.
                  properties:
                    kustomize:
                      type: object
                      description: Kustomization to apply as PostRenderer.
                      properties:
                        images:
                          type: array
                          description: Images is a list of (image name, new name,
                            new tag or digest) for changing image names, tags or digests.
                            This can also be achieved with a patch, but this operator
                            is simpler to specify.
                          items:
                            type: object
                            description: Image contains an image name, a new name,
                              a new tag or digest, which will replace the original
                              name and tag.
                            properties:
                              name:
                                type: string
                                description: Name is a tag-less image name.
                              digest:
                                type: string
                                description: Digest is the value used to replace the
                                  original image tag. If digest is present NewTag
                                  value is ignored.
                              newName:
                                type: string
                                description: NewName is the value used to replace
                                  the original name.
                              newTag:
                                type: string
                                description: NewTag is the value used to replace the
                                  original tag.
                            required:
                            - name
                        patchesJson6902:
                          type: array
                          description: JSON 6902 patches, defined as inline YAML objects.
                          items:
                            type: object
                            description: JSON6902Patch contains a JSON6902 patch and
                              the target the patch should be applied to.
                            properties:
                              patch:
                                type: array
                                description: Patch contains the JSON6902 patch document
                                  with an array of operation objects.
                                items:
                                  type: object
                                  description: JSON6902 is a JSON6902 operation object.
                                    https://tools.ietf.org/html/rfc6902#section-4
                                  properties:
                                    value:
                                      x-kubernetes-preserve-unknown-fields: true
                                    from:
                                      type: string
                                    op:
                                      type: string
                                      enum:
                                      - test
                                      - remove
                                      - add
                                      - replace
                                      - move
                                      - copy
                                    path:
                                      type: string
                                  required:
                                  - op
                                  - path
                              target:
                                type: object
                                description: Target points to the resources that the
                                  patch document should be applied to.
                                properties:
                                  name:
                                    type: string
                                    description: Name to match resources with.
                                  namespace:
                                    type: string
                                    description: Namespace to select resources from.
                                  kind:
                                    type: string
                                    description: Kind of the API Group to select resources
                                      from. Together with Group and Version it is
                                      capable of unambiguously identifying and/or
                                      selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
                                  annotationSelector:
                                    type: string
                                    description: AnnotationSelector is a string that
                                      follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
                                      It matches with the resource annotations.
                                  group:
                                    type: string
                                    description: Group is the API group to select
                                      resources from. Together with Version and Kind
                                      it is capable of unambiguously identifying and/or
                                      selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
                                  labelSelector:
                                    type: string
                                    description: LabelSelector is a string that follows
                                      the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
                                      It matches with the resource labels.
                                  version:
                                    type: string
                                    description: Version of the API Group to select
                                      resources from. Together with Group and Kind
                                      it is capable of unambiguously identifying and/or
                                      selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
                            required:
                            - patch
                            - target
                        patchesStrategicMerge:
                          type: array
                          description: Strategic merge patches, defined as inline
                            YAML objects.
                          items:
                            x-kubernetes-preserve-unknown-fields: true
              releaseName:
                type: string
                description: ReleaseName used for the Helm release. Defaults to a
                  composition of '[TargetNamespace-]Name'.
                maxLength: 53
                minLength: 1
              rollback:
                type: object
                description: Rollback holds the configuration for Helm rollback actions
                  for this HelmRelease.
                properties:
                  cleanupOnFail:
                    type: boolean
                    description: CleanupOnFail allows deletion of new resources created
                      during the Helm rollback action when it fails.
                  disableHooks:
                    type: boolean
                    description: DisableHooks prevents hooks from running during the
                      Helm rollback action.
                  disableWait:
                    type: boolean
                    description: DisableWait disables the waiting for resources to
                      be ready after a Helm rollback has been performed.
                  force:
                    type: boolean
                    description: Force forces resource updates through a replacement
                      strategy.
                  recreate:
                    type: boolean
                    description: Recreate performs pod restarts for the resource if
                      applicable.
                  timeout:
                    type: string
                    description: Timeout is the time to wait for any individual Kubernetes
                      operation (like Jobs for hooks) during the performance of a
                      Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
              storageNamespace:
                type: string
                description: StorageNamespace used for the Helm storage. Defaults
                  to the namespace of the HelmRelease.
                maxLength: 63
                minLength: 1
              suspend:
                type: boolean
                description: Suspend tells the controller to suspend reconciliation
                  for this HelmRelease, it does not apply to already started reconciliations.
                  Defaults to false.
              targetNamespace:
                type: string
                description: TargetNamespace to target when performing operations
                  for the HelmRelease. Defaults to the namespace of the HelmRelease.
                maxLength: 63
                minLength: 1
              test:
                type: object
                description: Test holds the configuration for Helm test actions for
                  this HelmRelease.
                properties:
                  enable:
                    type: boolean
                    description: Enable enables Helm test actions for this HelmRelease
                      after an Helm install or upgrade action has been performed.
                  ignoreFailures:
                    type: boolean
                    description: IgnoreFailures tells the controller to skip remediation
                      when the Helm tests are run but fail. Can be overwritten for
                      tests run after install or upgrade actions in 'Install.IgnoreTestFailures'
                      and 'Upgrade.IgnoreTestFailures'.
                  timeout:
                    type: string
                    description: Timeout is the time to wait for any individual Kubernetes
                      operation during the performance of a Helm test action. Defaults
                      to 'HelmReleaseSpec.Timeout'.
              timeout:
                type: string
                description: Timeout is the time to wait for any individual Kubernetes
                  operation (like Jobs for hooks) during the performance of a Helm
                  action. Defaults to '5m0s'.
              uninstall:
                type: object
                description: Uninstall holds the configuration for Helm uninstall
                  actions for this HelmRelease.
                properties:
                  disableHooks:
                    type: boolean
                    description: DisableHooks prevents hooks from running during the
                      Helm rollback action.
                  keepHistory:
                    type: boolean
                    description: KeepHistory tells Helm to remove all associated resources
                      and mark the release as deleted, but retain the release history.
                  timeout:
                    type: string
                    description: Timeout is the time to wait for any individual Kubernetes
                      operation (like Jobs for hooks) during the performance of a
                      Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
              upgrade:
                type: object
                description: Upgrade holds the configuration for Helm upgrade actions
                  for this HelmRelease.
                properties:
                  cleanupOnFail:
                    type: boolean
                    description: CleanupOnFail allows deletion of new resources created
                      during the Helm upgrade action when it fails.
                  disableHooks:
                    type: boolean
                    description: DisableHooks prevents hooks from running during the
                      Helm upgrade action.
                  disableOpenAPIValidation:
                    type: boolean
                    description: DisableOpenAPIValidation prevents the Helm upgrade
                      action from validating rendered templates against the Kubernetes
                      OpenAPI Schema.
                  disableWait:
                    type: boolean
                    description: DisableWait disables the waiting for resources to
                      be ready after a Helm upgrade has been performed.
                  force:
                    type: boolean
                    description: Force forces resource updates through a replacement
                      strategy.
                  preserveValues:
                    type: boolean
                    description: PreserveValues will make Helm reuse the last release's
                      values and merge in overrides from 'Values'. Setting this flag
                      makes the HelmRelease non-declarative.
                  remediation:
                    type: object
                    description: Remediation holds the remediation configuration for
                      when the Helm upgrade action for the HelmRelease fails. The
                      default is to not perform any action.
                    properties:
                      strategy:
                        type: string
                        description: Strategy to use for failure remediation. Defaults
                          to 'rollback'.
                        enum:
                        - rollback
                        - uninstall
                      ignoreTestFailures:
                        type: boolean
                        description: IgnoreTestFailures tells the controller to skip
                          remediation when the Helm tests are run after an upgrade
                          action but fail. Defaults to 'Test.IgnoreFailures'.
                      remediateLastFailure:
                        type: boolean
                        description: RemediateLastFailure tells the controller to
                          remediate the last failure, when no retries remain. Defaults
                          to 'false' unless 'Retries' is greater than 0.
                      retries:
                        type: integer
                        description: Retries is the number of retries that should
                          be attempted on failures before bailing. Remediation, using
                          'Strategy', is performed between each attempt. Defaults
                          to '0', a negative integer equals to unlimited retries.
                  timeout:
                    type: string
                    description: Timeout is the time to wait for any individual Kubernetes
                      operation (like Jobs for hooks) during the performance of a
                      Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
              values:
                description: Values holds the values for this Helm release.
                x-kubernetes-preserve-unknown-fields: true
              valuesFrom:
                type: array
                description: ValuesFrom holds references to resources containing Helm
                  values for this HelmRelease, and information about how they should
                  be merged.
                items:
                  type: object
                  description: ValuesReference contains a reference to a resource
                    containing Helm values, and optionally the key they can be found
                    at.
                  properties:
                    name:
                      type: string
                      description: Name of the values referent. Should reside in the
                        same namespace as the referring resource.
                      maxLength: 253
                      minLength: 1
                    kind:
                      type: string
                      description: Kind of the values referent, valid values are ('Secret',
                        'ConfigMap').
                      enum:
                      - Secret
                      - ConfigMap
                    optional:
                      type: boolean
                      description: Optional marks this ValuesReference as optional.
                        When set, a not found error for the values reference is ignored,
                        but any ValuesKey, TargetPath or transient error will still
                        result in a reconciliation failure.
                    targetPath:
                      type: string
                      description: TargetPath is the YAML dot notation path the value
                        should be merged at. When set, the ValuesKey is expected to
                        be a single flat value. Defaults to 'None', which results
                        in the values getting merged at the root.
                    valuesKey:
                      type: string
                      description: ValuesKey is the data key where the values.yaml
                        or a specific value can be found at. Defaults to 'values.yaml'.
                  required:
                  - kind
                  - name
            required:
            - chart
            - interval
          status:
            type: object
            description: HelmReleaseStatus defines the observed state of a HelmRelease.
            properties:
              conditions:
                type: array
                description: Conditions holds the conditions for the HelmRelease.
                items:
                  type: object
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    type:
                      type: string
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    status:
                      type: string
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                    message:
                      type: string
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                    observedGeneration:
                      type: integer
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                    reason:
                      type: string
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
              failures:
                type: integer
                description: Failures is the reconciliation failure count against
                  the latest desired state. It is reset after a successful reconciliation.
                format: int64
              helmChart:
                type: string
                description: HelmChart is the namespaced name of the HelmChart resource
                  created by the controller for the HelmRelease.
              installFailures:
                type: integer
                description: InstallFailures is the install failure count against
                  the latest desired state. It is reset after a successful reconciliation.
                format: int64
              lastAppliedRevision:
                type: string
                description: LastAppliedRevision is the revision of the last successfully
                  applied source.
              lastAttemptedRevision:
                type: string
                description: LastAttemptedRevision is the revision of the last reconciliation
                  attempt.
              lastAttemptedValuesChecksum:
                type: string
                description: LastAttemptedValuesChecksum is the SHA1 checksum of the
                  values of the last reconciliation attempt.
              lastHandledReconcileAt:
                type: string
                description: LastHandledReconcileAt holds the value of the most recent
                  reconcile request value, so a change can be detected.
              lastReleaseRevision:
                type: integer
                description: LastReleaseRevision is the revision of the last successful
                  Helm release.
              observedGeneration:
                type: integer
                description: ObservedGeneration is the last observed generation.
                format: int64
              upgradeFailures:
                type: integer
                description: UpgradeFailures is the upgrade failure count against
                  the latest desired state. It is reset after a successful reconciliation.
                format: int64
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helm-controller
  labels:
    control-plane: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helm-controller
  template:
    metadata:
      labels:
        app: helm-controller
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: helm-controller
      containers:
      - name: manager
        image: fluxcd/helm-controller:v0.8.2
        args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        ports:
        - name: http-prom
          containerPort: 8080
        - name: healthz
          protocol: TCP
          containerPort: 9440
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - name: temp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            port: healthz
            path: /healthz
        readinessProbe:
          httpGet:
            port: healthz
            path: /readyz
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: temp
        emptyDir: {}
