apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: imageupdateautomations.image.toolkit.fluxcd.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
spec:
  group: image.toolkit.fluxcd.io
  names:
    kind: ImageUpdateAutomation
    listKind: ImageUpdateAutomationList
    plural: imageupdateautomations
    singular: imageupdateautomation
  scope: Namespaced
  versions:
  - name: v1alpha1
    additionalPrinterColumns:
    - name: Last run
      type: string
      jsonPath: .status.lastAutomationRunTime
    schema:
      openAPIV3Schema:
        type: object
        description: ImageUpdateAutomation is the Schema for the imageupdateautomations
          API
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
            properties:
              checkout:
                type: object
                description: Checkout gives the parameters for cloning the git repository,
                  ready to make changes.
                properties:
                  branch:
                    type: string
                    description: Branch gives the branch to clone from the git repository.
                      If `.spec.push` is not supplied, commits will also be pushed
                      to this branch.
                  gitRepositoryRef:
                    type: object
                    description: GitRepositoryRef refers to the resource giving access
                      details to a git repository to update files in.
                    properties:
                      name:
                        type: string
                        description: Name of the referent
                    required:
                    - name
                required:
                - branch
                - gitRepositoryRef
              commit:
                type: object
                description: Commit specifies how to commit to the git repository.
                properties:
                  authorEmail:
                    type: string
                    description: AuthorEmail gives the email to provide when making
                      a commit
                  authorName:
                    type: string
                    description: AuthorName gives the name to provide when making
                      a commit
                  messageTemplate:
                    type: string
                    description: MessageTemplate provides a template for the commit
                      message, into which will be interpolated the details of the
                      change made.
                required:
                - authorEmail
                - authorName
              interval:
                type: string
                description: Interval gives an lower bound for how often the automation
                  run should be attempted.
              push:
                type: object
                description: Push specifies how and where to push commits made by
                  the automation. If missing, commits are pushed (back) to `.spec.checkout.branch`.
                properties:
                  branch:
                    type: string
                    description: Branch specifies that commits should be pushed to
                      the branch named. The branch is created using `.spec.checkout.branch`
                      as the starting point, if it doesn't already exist.
                required:
                - branch
              suspend:
                type: boolean
                description: Suspend tells the controller to not run this automation,
                  until it is unset (or set to false). Defaults to false.
              update:
                type: object
                default:
                  strategy: Setters
                description: Update gives the specification for how to update the
                  files in the repository. This can be left empty, to use the default
                  value.
                properties:
                  strategy:
                    type: string
                    default: Setters
                    description: Strategy names the strategy to be used.
                    enum:
                    - Setters
                  path:
                    type: string
                    description: Path to the directory containing the manifests to
                      be updated. Defaults to 'None', which translates to the root
                      path of the GitRepositoryRef.
                required:
                - strategy
            required:
            - checkout
            - commit
            - interval
          status:
            type: object
            description: ImageUpdateAutomationStatus defines the observed state of
              ImageUpdateAutomation
            properties:
              conditions:
                type: array
                items:
                  type: object
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    type:
                      type: string
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    status:
                      type: string
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                    message:
                      type: string
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                    observedGeneration:
                      type: integer
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                    reason:
                      type: string
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
              lastAutomationRunTime:
                type: string
                description: LastAutomationRunTime records the last time the controller
                  ran this automation through to completion (even if no updates were
                  made).
                format: date-time
              lastHandledReconcileAt:
                type: string
                description: LastHandledReconcileAt holds the value of the most recent
                  reconcile request value, so a change can be detected.
              lastPushCommit:
                type: string
                description: LastPushCommit records the SHA1 of the last commit made
                  by the controller, for this automation object
              lastPushTime:
                type: string
                description: LastPushTime records the time of the last pushed change.
                format: date-time
              observedGeneration:
                type: integer
                format: int64
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-automation-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-automation-controller
  labels:
    control-plane: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-automation-controller
  template:
    metadata:
      labels:
        app: image-automation-controller
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: image-automation-controller
      containers:
      - name: manager
        image: fluxcd/image-automation-controller:v0.7.0
        args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        ports:
        - name: http-prom
          containerPort: 8080
        - name: healthz
          protocol: TCP
          containerPort: 9440
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - name: temp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            port: healthz
            path: /healthz
        readinessProbe:
          httpGet:
            port: healthz
            path: /readyz
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: temp
        emptyDir: {}
      securityContext:
        fsGroup: 1337
