apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: imagepolicies.image.toolkit.fluxcd.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
spec:
  group: image.toolkit.fluxcd.io
  names:
    kind: ImagePolicy
    listKind: ImagePolicyList
    plural: imagepolicies
    singular: imagepolicy
  scope: Namespaced
  versions:
  - name: v1alpha1
    additionalPrinterColumns:
    - name: LatestImage
      type: string
      jsonPath: .status.latestImage
    schema:
      openAPIV3Schema:
        type: object
        description: ImagePolicy is the Schema for the imagepolicies API
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: ImagePolicySpec defines the parameters for calculating the
              ImagePolicy
            properties:
              filterTags:
                type: object
                description: FilterTags enables filtering for only a subset of tags
                  based on a set of rules. If no rules are provided, all the tags
                  from the repository will be ordered and compared.
                properties:
                  extract:
                    type: string
                    description: Extract allows a capture group to be extracted from
                      the specified regular expression pattern, useful before tag
                      evaluation.
                  pattern:
                    type: string
                    description: Pattern specifies a regular expression pattern used
                      to filter for image tags.
              imageRepositoryRef:
                type: object
                description: ImageRepositoryRef points at the object specifying the
                  image being scanned
                properties:
                  name:
                    type: string
                    description: Name of the referent
                required:
                - name
              policy:
                type: object
                description: Policy gives the particulars of the policy to be followed
                  in selecting the most recent image
                properties:
                  alphabetical:
                    type: object
                    description: Alphabetical set of rules to use for alphabetical
                      ordering of the tags.
                    properties:
                      order:
                        type: string
                        default: asc
                        description: Order specifies the sorting order of the tags.
                          Given the letters of the alphabet as tags, ascending order
                          would select Z, and descending order would select A.
                        enum:
                        - asc
                        - desc
                  numerical:
                    type: object
                    description: Numerical set of rules to use for numerical ordering
                      of the tags.
                    properties:
                      order:
                        type: string
                        default: asc
                        description: Order specifies the sorting order of the tags.
                          Given the integer values from 0 to 9 as tags, ascending
                          order would select 9, and descending order would select
                          0.
                        enum:
                        - asc
                        - desc
                  semver:
                    type: object
                    description: SemVer gives a semantic version range to check against
                      the tags available.
                    properties:
                      range:
                        type: string
                        description: Range gives a semver range for the image tag;
                          the highest version within the range that's a tag yields
                          the latest image.
                    required:
                    - range
            required:
            - imageRepositoryRef
            - policy
          status:
            type: object
            description: ImagePolicyStatus defines the observed state of ImagePolicy
            properties:
              conditions:
                type: array
                items:
                  type: object
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    type:
                      type: string
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    status:
                      type: string
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                    message:
                      type: string
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                    observedGeneration:
                      type: integer
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                    reason:
                      type: string
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
              latestImage:
                type: string
                description: LatestImage gives the first in the list of images scanned
                  by the image repository, when filtered and ordered according to
                  the policy.
              observedGeneration:
                type: integer
                format: int64
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: imagerepositories.image.toolkit.fluxcd.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
spec:
  group: image.toolkit.fluxcd.io
  names:
    kind: ImageRepository
    listKind: ImageRepositoryList
    plural: imagerepositories
    singular: imagerepository
  scope: Namespaced
  versions:
  - name: v1alpha1
    additionalPrinterColumns:
    - name: Last scan
      type: string
      jsonPath: .status.lastScanResult.scanTime
    - name: Tags
      type: string
      jsonPath: .status.lastScanResult.tagCount
    schema:
      openAPIV3Schema:
        type: object
        description: ImageRepository is the Schema for the imagerepositories API
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: ImageRepositorySpec defines the parameters for scanning an
              image repository, e.g., `fluxcd/flux`.
            properties:
              image:
                type: string
                description: Image is the name of the image repository
              secretRef:
                type: object
                description: SecretRef can be given the name of a secret containing
                  credentials to use for the image registry. The secret should be
                  created with `kubectl create secret docker-registry`, or the equivalent.
                properties:
                  name:
                    type: string
                    description: Name of the referent
                required:
                - name
              certSecretRef:
                type: object
                description: "CertSecretRef can be given the name of a secret containing
                  either or both of \n  - a PEM-encoded client certificate (`certFile`)
                  and private  key (`keyFile`);  - a PEM-encoded CA certificate (`caFile`)
                  \n  and whichever are supplied, will be used for connecting to the
                  \ registry. The client cert and key are useful if you are  authenticating
                  with a certificate; the CA cert is useful if  you are using a self-signed
                  server certificate."
                properties:
                  name:
                    type: string
                    description: Name of the referent
                required:
                - name
              interval:
                type: string
                description: Interval is the length of time to wait between scans
                  of the image repository.
              suspend:
                type: boolean
                description: This flag tells the controller to suspend subsequent
                  image scans. It does not apply to already started scans. Defaults
                  to false.
              timeout:
                type: string
                description: Timeout for image scanning. Defaults to 'Interval' duration.
          status:
            type: object
            description: ImageRepositoryStatus defines the observed state of ImageRepository
            properties:
              canonicalImageName:
                type: string
                description: CanonicalName is the name of the image repository with
                  all the implied bits made explicit; e.g., `docker.io/library/alpine`
                  rather than `alpine`.
              conditions:
                type: array
                items:
                  type: object
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    type:
                      type: string
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    status:
                      type: string
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                    message:
                      type: string
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                    observedGeneration:
                      type: integer
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                    reason:
                      type: string
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
              lastHandledReconcileAt:
                type: string
                description: LastHandledReconcileAt holds the value of the most recent
                  reconcile request value, so a change can be detected.
              lastScanResult:
                type: object
                description: LastScanResult contains the number of fetched tags.
                properties:
                  scanTime:
                    type: string
                    format: date-time
                  tagCount:
                    type: integer
                required:
                - tagCount
              observedGeneration:
                type: integer
                description: ObservedGeneration is the last reconciled generation.
                format: int64
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-reflector-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-reflector-controller
  labels:
    control-plane: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-reflector-controller
  template:
    metadata:
      labels:
        app: image-reflector-controller
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: image-reflector-controller
      containers:
      - name: manager
        image: fluxcd/image-reflector-controller:v0.8.0
        args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        ports:
        - name: http-prom
          containerPort: 8080
        - name: healthz
          protocol: TCP
          containerPort: 9440
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - name: temp
          mountPath: /tmp
        - name: data
          mountPath: /data
        livenessProbe:
          httpGet:
            port: healthz
            path: /healthz
        readinessProbe:
          httpGet:
            port: healthz
            path: /readyz
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: temp
        emptyDir: {}
      - name: data
        emptyDir: {}
      securityContext:
        fsGroup: 1337
